{
	"functions": [
		{
			"category": {
				"name": "Color",
				"description": "The main color function of Henris. This function-pack creates and displays all the colors from the defined sets.",
				"subfunctions": [
					{
						"name": "define-custom-colorset()",
						"return": "",
						"description": "Defines a new custom color set.",
						"syntax": ""
					},
					{
						"name": "define-custom-colors()",
						"return": "",
						"description": "Defines a new custom color to the current color set.",
						"syntax": ""
					},
					{
						"name": "define-color-set()",
						"return": "nothing",
						"description": "Defines a new custom color set.",
						"syntax": ""

					},
					{
						"name": "color()",
						"return": "color",
						"description": "The main color function, get the color from the current colorset",
						"syntax": "color($color);"

					},
					{
						"name": "is-string-color()",
						"return": "boolean",
						"description": "Check if the type of a color and return if its not a rgb or hex.",
						"syntax": "is-string-color($color);"
					},
					{
						"name": "to-string-color()",
						"return": "color(rgba)",
						"description": "Convert a string to a color, always an rgba color with opacity.",
						"syntax": "to-string-color('Blue');"
					},
					{
						"name": "to-defined-color()",
						"return": "color",
						"description": "Check if the color is a rgb, hex or a specific, color from the existing colorset and return a color",
						"syntax": ""
					},
					{
						"name": "color-exists()",
						"return": "boolean",
						"description": "Check if the color exists in the current set.",
						"syntax": "color-exists($color);"
					},
					{
						"name": "get-color()",
						"return": "color",
						"description": "Returns a color if it exists, if not, it will respond with a warning and will return nothing.",
						"syntax": ""
					},
					{
						"name": "define-bw()",
						"return": "",
						"description": "Helper function for black() and white(), when the colorset doesn't have a black or white, this function defines the default black and white. Will give a warning.",
						"syntax": ""
					},
					{
						"name": "color-brightness()",
						"return": "number",
						"description": "Returns a overall brightness of the color in percentage.",
						"syntax": "color-brightness($color, $percentage);"
					},
					{
						"name": "color-brightness-calc()",
						"return": "number",
						"description": "Returns the brightness of the color between 0 and 100.",
						"syntax": "color-brightness-calc($color);"
					},
					{
						"name": "contra()",
						"return": "color",
						"description": "Returns either the Black, or White from the current colorset. Whichever has the most contrast with the given color.",
						"syntax": "contra($color);"
					},
					{
						"name": "black()",
						"return": "color",
						"description": "Returns a translucent shade of the Black in the current colorset.",
						"syntax": "black($opacity);"
					},
					{
						"name": "white()",
						"return": "color",
						"description": "Returns a translucent shade of the White in the current colorset.",
						"syntax": "white($opacity);"
					},
					{
						"name": "gray()",
						"return": "color",
						"description": "Returns a shade of gray between 0(black) and 100 (white).",
						"syntax": "gray($opacity);"
					},
					{
						"name": "darken()",
						"return": "color",
						"description": "A substitute of the default darken() function in Sass. Behaves the same, but also allows and checks for the colors in the current colorset.",
						"syntax": "darken($color, $opacity);"
					},
					{
						"name": "lighten",
						"return": "color",
						"description": "A substitute of the default lighten() function in Sass. Behaves the same, but also allows and checks for the colors in the current colorset.",
						"syntax": "lighten($color, $opacity);"
					},
					{
						"name": "native-rgba()",
						"return": "",
						"description": "Sass sometimes wants to compile the 'rgba' function. This is not always what you want. This function does not compile.",
						"syntax": ""
					}
				]
			}
		}
	]
}
